import{y as t}from"./vue-vendor-BAnrfl1G.js";import{K as n,M as e,N as i}from"./index-TwMLNQLv.js";class o extends n.BaseService{constructor(){super(e.create(i.ConversationManager))}async open(t,n){const e=await this.manager.open(t,n);return null==e||null==e.data?Promise.reject(new Error("data error!")):e.data}async pinConversation(t,n,e){const i=await this.manager.pinConversation(t,n,e);return null==i||null==i.data?Promise.reject(new Error("data error!")):i.data}async messageFeedback(t,n){const e=await this.manager.messageFeedback(t,n);return null==e||null==e.data?Promise.reject(new Error("data error!")):e.data}}const s=(t,n)=>!(!t||!n)&&t===n,r=(t,n)=>!(!t||!n)&&(s(t.id,n)||s(t.uuid,n)),a=t("conversation",{state:()=>({loading:!1,error:null,initialized:!1,conversations:[],currentConversationId:null,searchResults:null,chatContext:null}),getters:{isLoading:t=>t.loading,getError:t=>t.error,isInitialized:t=>t.initialized,currentConversation:t=>t.currentConversationId&&t.conversations.find(n=>r(n,t.currentConversationId))||null,sortedConversations:t=>[...t.conversations].sort((t,n)=>new Date(n.updatedAt||0).getTime()-new Date(t.updatedAt||0).getTime()),currentConversationTitle:t=>t.currentConversationId?t.conversations.find(n=>r(n,t.currentConversationId))?.title:"New Conversation",unreadCount:t=>t.conversations.reduce((t,n)=>t+(n.unreadCount||0),0)},actions:{async initialize(){try{this.loading=!0;const t=new o,n=await t.listByPage({},{pageNumber:0,pageSize:20});this.conversations=n.content||[],this.sortConversations(),this.conversations.length>0&&!this.currentConversationId&&(this.currentConversationId=this.conversations[0].id),this.initialized=!0}catch(t){this.error=t}finally{this.loading=!1}},async loadMoreConversations(t,n=20){try{this.loading=!0;const e=new o,i=await e.listByPage({},{pageNumber:t,pageSize:n});this.conversations=[...this.conversations,...i.content||[]],this.sortConversations()}catch(e){throw this.error=e,e}finally{this.loading=!1}},async sortConversations(){this.conversations.sort((t,n)=>window.$date.parse(n.updatedAt).getTime()-window.$date.parse(t.updatedAt).getTime())},async createConversationRemote(t){const n=new o;t?.title&&(t.title=t.title.substring(0,20));const e=await n.create({...t});return this._updateConversation(e),e},async _updateConversation(t){const n=this.conversations.findIndex(n=>this.isSameConversation(n,t));n>=0?(this.conversations[n]={...this.conversations[n],...t},this.conversations=[...this.conversations],this.conversations[n].updatedAt=window.$date.format(new Date)):(t.updatedAt=window.$date.format(new Date),this.conversations.push(t)),await this.sortConversations()},isSameConversation:(t,n)=>((t,n)=>!(!t||!n)&&(s(t.id,n.id)||s(t.uuid,n.uuid)||s(t.id,n.uuid)||s(t.uuid,n.id)))(t,n),async open(t,n){const e=new o,i={agentId:t,...n},s=await e.open(i);return this._updateConversation(s),s},async createConversation(t){try{this.loading=!0;const n={uuid:window.$uuid(),title:t};return this.conversations.unshift(n),this.currentConversationId=n.uuid||n.id,n}catch(n){throw this.error=n,n}finally{this.loading=!1}},findConversation(t){return this.conversations.find(n=>r(n,t))},findCurrentConversation(){return this.findConversation(this.currentConversationId)},async switchConversation(t){try{this.loading=!0,this.conversations.some(n=>r(n,t))&&(this.currentConversationId=t)}catch(n){throw this.error=n,n}finally{this.loading=!1}},async deleteConversation(t){try{this.loading=!0,this.conversations=this.conversations.filter(n=>n.id!==t),this.currentConversationId===t&&(this.currentConversationId=this.conversations[0]?.id)}catch(n){throw this.error=n,n}finally{this.loading=!1}},async updateConversation(t,n){try{this.loading=!0;const e=this.conversations.findIndex(n=>n.id===t);return-1!==e&&(this.conversations[e]={...this.conversations[e],...n},this.sortConversations()),n}catch(e){throw this.error=e,e}finally{this.loading=!1}},async updateConversationTimestamp(t){const n=this.findConversation(t);n&&(n.updatedAt=(t=>{const n=t=>t.toString().padStart(2,"0");return`${t.getFullYear()}-${n(t.getMonth()+1)}-${n(t.getDate())}T${n(t.getHours())}:${n(t.getMinutes())}:${n(t.getSeconds())}`})(new Date),this.sortConversations())},setChatContext(t){this.chatContext=t},getChatContext(){return this.chatContext},updateChatContext(t){const n=this.currentConversationId;return this.chatContext?this.chatContext={...this.chatContext,...t,conversation_id:n||this.chatContext.conversation_id,conversation_uuid:n||this.chatContext.conversation_uuid}:this.chatContext={conversation_id:n||void 0,conversation_uuid:n||void 0,...t},this.chatContext},getOrCreateChatContext(t){if(this.chatContext){const t=this.currentConversationId;return t&&this.chatContext.conversation_id!==t&&(this.chatContext={...this.chatContext,conversation_id:t,conversation_uuid:t}),this.chatContext}if(t){this.chatContext=t;const n=this.currentConversationId;return n&&this.chatContext.conversation_id!==n&&(this.chatContext={...this.chatContext,conversation_id:n,conversation_uuid:n}),this.chatContext}const n={conversation_id:this.currentConversationId||void 0,conversation_uuid:this.currentConversationId||void 0};return this.chatContext=n,this.chatContext},mergeChatContext(t){this.chatContext?this.chatContext={...this.chatContext,...t}:this.chatContext=t},reset(){this.conversations=[],this.currentConversationId=null,this.searchResults=null,this.chatContext=null}}});export{a as u};
