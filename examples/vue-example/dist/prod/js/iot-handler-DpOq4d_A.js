import{aX as t,aY as e,aZ as i}from"./index-Cw3XK0oB.js";import{M as n}from"./chat-wXkfULx_.js";import"./vue-vendor-CnVaDBlt.js";import"./utils-vendor-WEzSe-CR.js";import"./conversation-DV4HYzLZ.js";import"./sdkwork_stream_player-m4ihGm-Y.js";class s{name="IotMessageHandler";connectionState;client;eventEmitter;eventAdapter;config;constructor(i,n,s){this.config=i,this.eventEmitter=n,this.eventAdapter=s;const{sdkClient:a}=t();this.client=a,this.connectionState={state:e.DISCONNECTED,connected:!1}}async initialize(){try{if(!this.client)throw new Error("Failed to get SDK client from useIotClient");this.setupEventListeners(),this.updateConnectionState(this.client.getConnectionState())}catch(t){throw this.eventEmitter.emit(this.eventAdapter.adaptErrorOccurred(t)),t}}disconnect(){this.client&&(this.client.disconnect(),this.updateConnectionState({state:e.DISCONNECTED,connected:!1}))}startListening(){this.client&&this.client.startListening()}stopListening(){this.client&&this.client.stopListening()}send(t,e){this.client&&this.client.send(t,e)}sendAudioStream(t,e,i){this.client&&this.client.sendAudioStream(t,e,i)}sendHello(t,e){this.client&&this.client.sendHello(t,e)}sendEvent(t,e){this.client&&this.client.sendEvent(t,e)}sendProtocol(t){this.client&&this.client.sendProtocol(t)}getConnectionState(){return this.client?this.client.getConnectionState():this.connectionState}isConnected(){return!!this.client&&this.client.isConnected()}async destroy(){this.client&&(await this.client.destroy(),this.client=null)}isChunk(t){}setupEventListeners(){this.client&&null!=this.client&&(this.client.onEvent(t=>{if(i.CONNECTED===t.event_type){const e=this.client.getConnectionState();this.updateConnectionState(e),this.eventEmitter.emit(this.eventAdapter.adaptIotEventReceived(i.CONNECTED,t))}if(i.DISCONNECTED===t.event_type){const e=this.client.getConnectionState();this.updateConnectionState(e),this.eventEmitter.emit(this.eventAdapter.adaptIotEventReceived(i.DISCONNECTED,t))}if("TTS_SENTENCE_START"===t.event_type){const e=t.payload;if(t.metadata){const i=n.toCompletionChunk(e.text,t.metadata);this.eventEmitter.emit(this.eventAdapter.adaptMessageChunkReceived({...t.metadata,chunk:i}))}}}),this.client.onMessageChunk(t=>{this.eventEmitter.emit(this.eventAdapter.adaptMessageChunkReceived(t))}),this.client.onMessage(t=>{this.eventEmitter.emit(this.eventAdapter.adaptMessageReceived(t))}),this.client.onAudioStream(t=>{this.eventEmitter.emit(this.eventAdapter.adaptAudioStreamReceived(t))}),this.client.onData(t=>{this.eventEmitter.emit(this.eventAdapter.adaptDataReceived(t))}),this.client.onToolCall(t=>{this.eventEmitter.emit(this.eventAdapter.adaptToolCallReceived(t))}),this.client.onError(t=>{this.eventEmitter.emit(this.eventAdapter.adaptErrorOccurred(t))}))}updateConnectionState(t){this.connectionState=t,this.eventEmitter.emit(this.eventAdapter.adaptConnectionChange(t))}}export{s as IotMessageHandler};
